#!/bin/bash
# -*- shell-script -*-

function find_command {
    for command in "$@"
    do
	which $command >/dev/null 2>&1
	if [ $? = 0 ]
	then
	    echo $command
	    return
	fi
    done
}

CONFIG_FILE="$HOME/.pomodoro-bash"
if [ -e "$CONFIG_FILE" ]
then
    source "$CONFIG_FILE"
fi

: ${UPDATE_INTERVAL_SECONDS:=1}
: ${WORK_SECONDS:=$(( 25 * 60 ))}
: ${BREAK_SECONDS:=$(( 5 * 60 ))}
: ${PROMPT_TO_START:=""}
: ${INTERACTIVE_COMMANDS_PROMPT:="Start new pomo (s), start pomo with a goal (g), take a break (b), quit (q)? "}

# "FREE RED TOMATO CLIP ART" by OpenGameArt.org is public domain.
# http://www.clipartlord.com/category/food-clip-art/vegetables-clip-art/tomato-clip-art/
: ${WORKING_ICON:=~/local/pomodoro-bash/tomato13.png}

# Public domain dog.
# https://thenounproject.com/term/dog/364/
: ${TAKING_A_BREAK_ICON::=~/local/pomodoro-bash/dog.svg}

# "Barking of a dog" by Wikimedia Commons is licensed under CC BY 3.0.
# https://commons.wikimedia.org/wiki/File:Barking_of_a_dog.ogg
# https://creativecommons.org/licenses/by/3.0/
: ${TAKING_A_BREAK_SOUND:=~/local/pomodoro-bash/Barking_of_a_dog.ogg}

# I made this one.
: ${WAITING_TO_START_ICON:=~/local/pomodoro-bash/circle_question.svg}

# "Text Message Alert 3 Sound" by Daniel Simion is licensed under CC BY 3.0.
# http://soundbible.com/2156-Text-Message-Alert-3.html
# https://creativecommons.org/licenses/by/3.0/
: ${WAITING_TO_START_SOUND:=~/local/pomodoro-bash/alert.ogg}

: ${LOG_FILE:=/dev/null}

: ${SET_CHAT_STATUS_COMMAND:=`find_command set-chat-status`}

# Mac OS: afplay
: ${SOUND_PLAYER_COMMAND:=`find_command paplay sndfile-play mpg123 beep`}

: ${APPLICATION_INDICATOR_COMMAND:=`find_command indicator-sysmonitor`}
: ${APPLICATION_INDICATOR_CONFIG_FILE:=${TMPDIR:-/tmp}/$USER-pomodoro-indicator-config.txt}
: ${APPLICATION_INDICATOR_ICON_FILE:=${TMPDIR:-/tmp}/$USER-pomodoro-indicator-icon.txt}

# Mac OS: display notification "the message" with title "the title" subtitle "the subtitle"
: ${NOTIFICATION_COMMAND:=`find_command notify-send`}


while [ "$#" -gt 0 ]
do
    case $1 in
	-w)
	    WORK_SECONDS=$2
	    shift 2
	    ;;
	-b)
	    BREAK_SECONDS=$2
	    shift 2
	    ;;
	-p)
	    PROMPT_TO_START=1
	    shift
	    ;;
	-h|*)
	    echo "pomodoro-bash [ -w WORK_SECONDS ] [ -b BREAK_SECONDS ] [ -p ]"
	    exit 0
	    ;;
    esac
done

function fail {
    echo "$*" 1>&2
    exit 1
}

function handle_command {
    local command=$1

    if [ "$command" = "s" ]
    then
	tput clear
	echo -ne "Starting a new pomo..."
	main_loop
    elif [ "$command" = "g" ]
    then
	tput clear
	show_cursor
	echo -e "What is your goal for this pomo? "
	read -e goal
	echo -ne "Starting a new pomo..."
	main_loop "$goal"
    elif [ "$command" = "q" ]
    then
	echo -e "\nBye!"
	tear_down
	exit 0
    elif [ "$command" = "b" ]
    then
	tput clear
	echo -e "\nTaking a break..."
	do_break_countdown
	prompt_to_start
	main_loop
    fi

    return 1
}

function handle_screen_resize {
    local lines=`tput lines`
    local columns=`tput cols`

    if [ $lines -ge 40 ] && [ $columns -ge 83 ]
    then
	SIZE_CATEGORY=large
    elif [ $lines -ge 24 ] && [ $columns -ge 49 ]
    then
	SIZE_CATEGORY=medium
    elif [ $lines -ge 11 ] && [ $columns -ge 49 ]
    then
	SIZE_CATEGORY=small
    else
	SIZE_CATEGORY=tiny
    fi
}

function print_countdown_time {
    local type=$1
    local end_date=$2

    local seconds_left=$(( $end_date - $now ))
    local formatted_time_left=`format_seconds_as_hh_mm $seconds_left`
    formatted_time_left="$(start_text_standout_mode)$formatted_time_left$(end_text_standout_mode)"

    # Using sed instead of variable substitutions because some of the
    # ASCII art contains special shell characters.
    eval "print_${SIZE_CATEGORY}_${type}_time" | sed "s/\$time/$formatted_time_left/"
}

function print_tiny_break_time {
    echo '$time'
}
function print_small_break_time {
    echo '$time'
}
function print_medium_break_time {
    local time=$1

    # ASCII art from dogsay. MIT License. Copyright (c) 2015 Forrest Fleming.
    # https://github.com/ffleming/dogsay
    cat <<'EOT' -
+-------+
| $time |
+-------+
\   _
 \ /  \
  /|oo \
 (_|  /_)
   `@/  \
   |     \     _
    \||   \   //
    |||\ /  \//
  _//|| _\   /
 (_/(_|(____/
EOT
}
function print_large_break_time {
    local time=$1

    # ASCII art from dogsay. MIT License. Copyright (c) 2015 Forrest Fleming.
    # https://github.com/ffleming/dogsay
    cat <<'EOT' -
			  _            +-------+
			,:'/   _..._   | $time |
		       // ( `""-.._.'  +-------+
                       \| /    6\___  /
                       |     6      4
                       |            /
                       \_       .--'
                       (_'---'`)
                       / `'---`()
                     ,'        |
     ,            .'`          |
     )\       _.-'             ;
    / |    .'`   _            /
  /` /   .'       '.        , |
 /  /   /           \   ;   | |
|  \  |            |  .|   | |
  \  `"|           /.-' |   | |
   '-..-\       _.;.._  |   |.;-.
         \    <`.._  )) |  .;-. ))
         (__.  `  ))-'  \_    ))'
             `'--"`       `"""`
EOT
}

function print_tiny_work_time {
    echo '$time'
}
function print_small_work_time {
    echo '$time'
}
function print_medium_work_time {
    local time=$1

    # ASCII art from dogsay. MIT License. Copyright (c) 2015 Forrest Fleming.
    # https://github.com/ffleming/dogsay
    cat <<'EOT' -
		   __   +-------+
		  / _) /| $time |
	 _.----._/ /    +-------+
       /          /
.--__/  (  | (  |'
 '-__..-'|_|--|_|
EOT
}
function print_large_work_time {
    local time=$1

    # ASCII art from dogsay. MIT License. Copyright (c) 2015 Forrest Fleming.
    # https://github.com/ffleming/dogsay
    cat <<'EOT' -
+-------+
| $time |           .-=-==--==--.
+-------+     ..-=="  ,'o`)      `.
             ,'         `"'         \
          \ :  (                     `.__...._
            |                  )    /         `-=-.
            :       ,vv.-._   /    /               `---==-._
             \/\/\/VV ^ d88`;'    /                         `.
                 ``  ^/d88P!'    /             ,              `._
                    ^/    !'   ,.      ,      /                  "-,,__,,--'""""-.
                   ^/    !'  ,'  \ . .(      (         _           )  ) ) ) ))_,-.\
                  ^(__ ,!',"'   ;:+.:%:a.     \:.. . ,'          )  )  ) ) ,"'    '
                  ',,,'','     /o:::":%:%a.    \:.:.:         .    )  ) _,'
                   """'       ;':::'' `+%%%a._  \%:%|         ;.). _,-""
                          ,-='_.-'      ``:%::)  )%:|        /:._,"
                         (/(/"           ," ,'_,'%%%:       (_,'
                                        (  (//(`.___;        \
                                         \     \    `         `
                                          `.    `.   `.        :
                                            \. . .\    : . . . :
                                             \. . .:    `.. . .:
                                              `..:.:\     \:...\
                                               ;:.:.;      ::...:
                                               ):%::       :::::;
                                           __,::%:(        :::::
                                        ,;:%%%%%%%:        ;:%::
                                          ;,--""-.`\  ,=--':%:%:\
                                         /"       "| /-".:%%%%%%%\
                                                         ;,-"'`)%%)
                                                        /"      "|
EOT
}

function print_banner {
    local type=$1

    local banner_function_name="print_${SIZE_CATEGORY}_${type}_banner"
    eval "$banner_function_name"
}

function print_tiny_break_banner {
    echo "Break!"
}
function print_small_break_banner {
    print_large_break_banner
}
function print_medium_break_banner {
    print_large_break_banner
}
function print_large_break_banner {
    cat <<'EOT' -
 ____                          _      _
| __ )   _ __    ___    __ _  | | __ | |
|  _ \  | '__|  / _ \  / _` | | |/ / | |
| |_) | | |    |  __/ | (_| | |   <  |_|
|____/  |_|     \___|  \__,_| |_|\_\ (_)

EOT
}

function print_tiny_ready_banner {
    echo "Ready?"
}
function print_small_ready_banner {
    print_large_ready_banner
}
function print_medium_ready_banner {
    print_large_ready_banner
}
function print_large_ready_banner {
    cat <<'EOT' -
 ____                       _           ___
|  _ \    ___    __ _    __| |  _   _  |__ \
| |_) |  / _ \  / _` |  / _` | | | | |   / /
|  _ <  |  __/ | (_| | | (_| | | |_| |  |_|
|_| \_\  \___|  \__,_|  \__,_|  \__, |  (_)
				|___/
EOT
}

function print_tiny_work_banner {
    echo "Focus!"
}
function print_small_work_banner {
    print_large_work_banner
}
function print_medium_work_banner {
    print_large_work_banner
}
function print_large_work_banner {
    cat <<'EOT' -
 _____                                _
|  ___|   ___     ___   _   _   ___  | |
| |_     / _ \   / __| | | | | / __| | |
|  _|   | (_) | | (__  | |_| | \__ \ |_|
|_|      \___/   \___|  \__,_| |___/ (_)
EOT
}

function count_down {
    local type=$1
    local countdown_printer=$2
    local seconds=$3
    local goal=$4

    local command_result=
    local now=`date +%s`
    local end_date=$(( $now + $seconds ))
    while [ $end_date -gt $now ]
    do
	handle_screen_resize

	local banner_message=$(print_banner "$type")
	local countdown_message=$(print_countdown_time "$type" "$end_date")

	discard_stdin
	tput clear
	echo -e "$banner_message\n"
	if [ -n "$goal" ]
	then
	    echo -e "Goal: $goal\n"
	fi
	echo -e "$countdown_message\n"
	echo -e "$INTERACTIVE_COMMANDS_PROMPT $command_result"

	hide_cursor
	local wait_seconds=1
	read -s -n 1 -t $wait_seconds command
	if [ -n "$command" ]
	then
	    handle_command "$command"
	    command_result="Huh? "
	fi

	now=`date +%s`
    done
}

function format_seconds_as_hh_mm {
    local seconds=$1

    local hours=`expr $seconds / 3600`
    if [ $hours -gt 0 ]
    then
	echo "I refuse to do that long of a pomodoro!" 1>&2
	exit 1
    fi

    local minutes=`expr $seconds  % 3600 / 60`
    local seconds=`expr $seconds % 60`
    printf "%02d:%02d\n" $minutes $seconds
}

function tear_down {
    stty sane
    show_cursor
    tear_down_application_indicator
    set_chat_status "chat"
    exit 0
}

function tear_down_application_indicator {
    if [ -n "$APPLICATION_INDICATOR_COMMAND" ]
    then
       rm -f $APPLICATION_INDICATOR_ICON_FILE $APPLICATION_INDICATOR_CONFIG_FILE
       killall "$APPLICATION_INDICATOR_COMMAND" >/dev/null 2>&1
    fi
}

# https://github.com/fossfreedom/indicator-sysmonitor
function initialize_application_indicator {
    if [ -n "$APPLICATION_INDICATOR_COMMAND" ]
    then
	echo '{"on_startup": false, "sensors": {"pomodoro": ["", "cat '$APPLICATION_INDICATOR_ICON_FILE'"] }, "interval": 2.0, "custom_text": "{pomodoro}"}' >$APPLICATION_INDICATOR_CONFIG_FILE
	echo "Starting..." >$APPLICATION_INDICATOR_ICON_FILE
	"$APPLICATION_INDICATOR_COMMAND" --config="$APPLICATION_INDICATOR_CONFIG_FILE" >>$LOG_FILE 2>&1 &
    fi
}

function set_application_indicator_icon {
    local icon_path=$1

    if [ -n "$APPLICATION_INDICATOR_COMMAND" ]
    then
	echo "USE_ICON:$icon_path" >$APPLICATION_INDICATOR_ICON_FILE
    fi
}

# https://wiki.ubuntu.com/NotifyOSD
# https://developer.gnome.org/notification-spec/
function send_notification {
    local message=$1
    local icon=$2

    if [ -n "$NOTIFICATION_COMMAND" ]
    then
	"$NOTIFICATION_COMMAND" --urgency=normal --icon="$icon" "$message" >>$LOG_FILE 2>&1
    fi
}

function set_chat_status {
    local new_status=$1

    if [ -n "$SET_CHAT_STATUS_COMMAND" ]
    then
	$SET_CHAT_STATUS_COMMAND $new_status >>$LOG_FILE 2>&1 &
    fi
}

function play_sound {
    if [ -n "$SOUND_PLAYER_COMMAND" ]
    then
	"$SOUND_PLAYER_COMMAND" "$1" >>$LOG_FILE 2>&1
    else
	echo -ne ''
    fi
}

function do_work_countdown {
    local goal=$1

    set_chat_status "dnd"
    set_application_indicator_icon "$WORKING_ICON"

    count_down "work" "$WORK_COUNTDOWN_PRINTER" $WORK_SECONDS "$goal"
}

function do_break_countdown {
    set_chat_status "chat"
    set_application_indicator_icon "$TAKING_A_BREAK_ICON"

    count_down "break" "$BREAK_COUNTDOWN_PRINTER" $BREAK_SECONDS
}

function discard_stdin {
    while read -t 0
    do
	read -s -n 1
    done
}

function start_text_standout_mode {
    tput smso
}

function end_text_standout_mode {
    tput rmso
}

function hide_cursor {
    tput civis
}

function show_cursor {
    tput cnorm
}

function prompt_to_start {
    set_application_indicator_icon "$WAITING_TO_START_ICON"

    tput clear
    eval "print_${SIZE_CATEGORY}_ready_banner"

    local default_command=s
    while true
    do
	discard_stdin
	echo -ne "\n$INTERACTIVE_COMMANDS_PROMPT [$default_command] "
	show_cursor
	read -n 1 command
	hide_cursor

	if [ -z "$command" ]
	then
	    command=$default_command
	fi

	handle_command $command
	echo -e "\nHuh?"
    done
}

function set_up {
    trap tear_down SIGINT SIGTERM SIGHUP

    # Handling the WINCH signal was causing random freezes when I resized
    # the screen on Ubuntu 14.04:
    # trap handle_screen_resize WINCH

    handle_screen_resize
    initialize_application_indicator

    if [ -n "$PROMPT_TO_START" ]
    then
	prompt_to_start
    fi
}

function main_loop {
    local goal=$1

    while true
    do
	do_work_countdown "$goal"

	send_notification "Take a break!" "$TAKING_A_BREAK_ICON"
	play_sound "$TAKING_A_BREAK_SOUND"
	do_break_countdown

	send_notification "Break over, man!" "$WORKING_ICON"
	play_sound "$WAITING_TO_START_SOUND"
	prompt_to_start
    done
}

set_up
main_loop
