#!/bin/bash
# -*- shell-script -*-

# "FREE RED TOMATO CLIP ART" by OpenGameArt.org is public domain.
# http://www.clipartlord.com/category/food-clip-art/vegetables-clip-art/tomato-clip-art/
WORKING_ICON=~/local/pomodoro-bash/tomato13.png

# "Jump" by Alexander Blagochevsky is licenced under CC BY 3.0 / background
# and red circle added to the original.
# https://thenounproject.com/term/jumping-jack/150919/
# https://creativecommons.org/licenses/by/3.0/
TAKING_A_BREAK_ICON=~/local/pomodoro-bash/jump-white.png

# "Barking of a dog" by Wikimedia Commons is licensed under CC BY 3.0.
# https://commons.wikimedia.org/wiki/File:Barking_of_a_dog.ogg
# https://creativecommons.org/licenses/by/3.0/
TAKING_A_BREAK_SOUND=~/local/pomodoro-bash/Barking_of_a_dog.ogg

# I made this one.
WAITING_TO_START_ICON=~/local/pomodoro-bash/circle_question.svg

# "Text Message Alert 3 Sound" by Daniel Simion is licensed under CC BY 3.0.
# http://soundbible.com/2156-Text-Message-Alert-3.html
# https://creativecommons.org/licenses/by/3.0/
WAITING_TO_START_SOUND=~/local/pomodoro-bash/alert.ogg

APPLICATION_INDICATOR_CONFIG_FILE=/tmp/$USER-pomodoro-indicator-config.txt
APPLICATION_INDICATOR_ICON_FILE=/tmp/$USER-pomodoro-indicator-icon.txt

function find_command {
    for command in "$@"
    do
	which $command >/dev/null 2>&1
	if [ $? = 0 ]
	then
	    echo $command
	    return
	fi
    done
}

SET_CHAT_STATUS_COMMAND=`find_command set-chat-status true`
BANNER_PRINTER_COMMAND=`find_command figlet banner toilet echo`
COUNTDOWN_PRINTER_COMMAND=`find_command cowsay echo`
SOUND_PLAYER_COMMAND=`find_command paplay sndfile-play mpg123 beep true`
UPDATE_INTERVAL_SECONDS=1
WORK_SECONDS=$(( 20 * 60 ))
BREAK_SECONDS=$(( 5 * 60 ))
PROMPT_TO_START=

while [ "$#" -gt 0 ]
do
    case $1 in
	-w)
	    WORK_SECONDS=$2
	    shift 2
	    ;;
	-b)
	    BREAK_SECONDS=$2
	    shift 2
	    ;;
	-p)
	    PROMPT_TO_START=1
	    shift
	    ;;
	-h|*)
	    echo "pomodoro-bash [ -w WORK_SECONDS ] [ -b BREAK_SECONDS ]"
	    exit 0
	    ;;
    esac
done

function fail {
    echo "$*" 1>&2
    exit 1
}

function check_required_value {
    local variable_name=$1
    local variable_value=${!variable_name}
    if [ -z "$variable_value" ]
    then
	fail "No value for $variable_name"
    fi
}

check_required_value BANNER_PRINTER_COMMAND
check_required_value COUNTDOWN_PRINTER_COMMAND

function count_down {
    local message=$1
    local seconds=$2

    local banner_message=`$BANNER_PRINTER_COMMAND "$message"`

    local now=`date +%s`
    local end_date=$(( $now + $seconds ))
    while [ $end_date -gt $now ]
    do
	seconds_left=$(( $end_date - $now ))
	local countdown_message=$($COUNTDOWN_PRINTER_COMMAND `format_seconds_as_hh_mm $seconds_left`)
	tput clear
	echo "$banner_message$countdown_message"
	sleep $UPDATE_INTERVAL_SECONDS
	now=`date +%s`
    done
}

function format_seconds_as_hh_mm {
    local seconds=$1

    local hours=`expr $seconds / 3600`
    if [ $hours -gt 0 ]
    then
	echo "I refuse to do that long of a pomodoro!" 1>&2
	exit 1
    fi

    local minutes=`expr $seconds  % 3600 / 60`
    local seconds=`expr $seconds % 60`
    printf "%02d:%02d\n" $minutes $seconds
}

function tear_down {
    tput cnorm
    tear_down_application_indicator
    $SET_CHAT_STATUS_COMMAND chat
    exit 0
}

function tear_down_application_indicator {
    rm -f $APPLICATION_INDICATOR_ICON_FILE $APPLICATION_INDICATOR_CONFIG_FILE
    killall indicator-sysmonitor
}

# https://github.com/fossfreedom/indicator-sysmonitor
function initialize_application_indicator {
    echo '{"on_startup": false, "sensors": {"pomodoro": ["", "cat '$APPLICATION_INDICATOR_ICON_FILE'"] }, "interval": 2.0, "custom_text": "{pomodoro}"}' >$APPLICATION_INDICATOR_CONFIG_FILE
    echo "Starting..." >$APPLICATION_INDICATOR_ICON_FILE
    indicator-sysmonitor --config="$APPLICATION_INDICATOR_CONFIG_FILE" >/dev/null 2>&1 &
}

function set_application_indicator_icon {
    echo "USE_ICON:$1" >$APPLICATION_INDICATOR_ICON_FILE
}

# https://wiki.ubuntu.com/NotifyOSD
# https://developer.gnome.org/notification-spec/
function send_notification {
    local message=$1
    local icon=$2

    notify-send --urgency=normal --icon="$icon" "$message"
}

function play_sound {
    $SOUND_PLAYER_COMMAND "$1" >/dev/null 2>&1
}

function do_interval_count_down {
    $SET_CHAT_STATUS_COMMAND dnd
    set_application_indicator_icon "$WORKING_ICON"

    count_down 'P o m o !' $WORK_SECONDS
}

function do_break_count_down {
    $SOUND_PLAYER_COMMAND "$TAKING_A_BREAK_SOUND"
    send_notification "Take a break!" "$TAKING_A_BREAK_ICON"
    $SET_CHAT_STATUS_COMMAND chat
    set_application_indicator_icon "$TAKING_A_BREAK_ICON"

    count_down 'B r e a k !' $BREAK_SECONDS
}

function prompt_to_start_over {
    send_notification "Break over, man!" "$WORKING_ICON"
    $SOUND_PLAYER_COMMAND "$WAITING_TO_START_SOUND"

    prompt_to_start
}

function prompt_to_start {
    set_application_indicator_icon "$WAITING_TO_START_ICON"

    tput clear
    $BANNER_PRINTER_COMMAND "R e a d y ?"
    echo -e "\nReady to start a pomo? (press enter) "
    tput cnorm
    read
    tput civis
    set_application_indicator_icon "$WORKING_ICON"
}

function main_loop {
    trap tear_down SIGINT SIGTERM SIGHUP
    initialize_application_indicator

    if [ -n "$PROMPT_TO_START" ]
    then
	prompt_to_start
    fi

    tput civis
    while true
    do
	do_interval_count_down
	do_break_count_down
	prompt_to_start_over
    done
}

main_loop
