#!/usr/bin/env bash
#-*-shell-script-*-

set-xterm-title "OSS huddle rails server"

mode=full
if [ -n "$1" ]
then
    mode="$1"
fi

port=443
if [ -n "$2" ]
then
    port="$2"
fi

fail() {
    echo "$@" 1>&2
    exit 1
}

pid_file="tmp/pids/server.pid"
if [ -f tmp/pids/server.pid ]
then
    kill -9 "$(cat "$pid_file")" || fail "Error killing PID in '$pid_file'"
    sleep 1
fi

# In case we are not ran via an interactive shell:
source "$HOME/.asdf/asdf.sh"

cd ~/projects/oss/huddle || fail "No huddle dir"

if [ "$mode" = "full" ]
then
    foreman start redis-data &
    foreman start redis-cache &

    asdf install ruby \
	&& gem install mailcatcher \
	&& gem install bundle \
	&& bundle install \
	&& echo "Migrating development..." && rake db:migrate RAILS_ENV=development \
	&& bundle exec rails runner 'WebhookConfig.all.update(enabled: false); Setting.set("KafkaPingEnabled", false); Setting.set("AutoConfirmationOfMoves", false); Setting.set("EnableSensorConnectors", false); User.omniauth_providers.map { |provider| Setting.find_by(name: "#{provider.to_s.camelize}AuthenticationSetting")&.destroy }; Setting.where("name like ?", "%AuthenticationConnector").each { |setting| setting.update!(data: setting.data&.gsub("true", "false")) }'
    [ "$?" -ne 0 ] && fail "Error setting up rails env"
fi

#. "$(dirname "$0")/export-webpack-dev-server-settings" \
#    &&

# Use Unicorn in hopes that it will freeze less than Puma.
#gem install unicorn && unicorn -l "0.0.0.0:$port"
#RAILS_ENV=development bin/rails s -b 0.0.0.0 -p "$port"

# Disabled SSL because it messes with Webpack Dev Server's auto-reloading.
#
# Setting up SSL https://gist.github.com/tadast/9932075
#
# sudo touch /etc/authbind/byport/443
# sudo chmod 777 /etc/authbind/byport/443

export DISABLE_SPRING=true

authbind --deep bundle exec rails s -b "ssl://0.0.0.0:$port?key=$HOME/.ssh/server.key&cert=$HOME/.ssh/server.crt"

#    && bundle exec rails server
